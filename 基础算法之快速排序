★算法步骤：

1 从数列中挑出一个元素，称为 "基准"（pivot），

2 重新排序数列，小于基准值的摆放在基准前面（左区），大与基准值的摆在基准的后面（右区）（相同的数可以到任一边）。
排序结束后，基准就处于数列的中间位置。这个称为分区（partition）操作。

3 递归地（recursive）把小于基准值元素的子数列（左区）和大于基准值元素的子数列（右区）进行步骤2的分区操作。
算法退出判断：当数列的长度是零或一（不用比较了）结束递归。

★示例演示：
[16,6,78,12,25,20,19,36]
1.取第一个值为基准 16
2.重新排序 大于5的一侧，小于5的一侧
6 12 16 78 25 20 19 36
其实就是三组：
6 12 （一组）
16 （二组）
78 25 20 19 36 （三组）

3.一三组递归重复2步骤，直到数组元素数量小于2。（一个自然不用比较）
6 12  基准6   一组为空  二组6 三组12  =>组合 6 12
78 25 20 19 36  基准78  一组25 20 19 36  二组78 三组为空，则二三组不用管，一组继续递归重复2步骤。
25 20 19 36 基准25 一组20 19  二组25  三组36  一组继续递归结果19 20=》组合 19 20 25 36
继续组合19 20 25 36 78
最后组合6 12 （一组） 16（二组） 19 20 25 36 78（三组）

★PHP快速排序算法
function quick_sort($array){
    if（count($array) <= 1）{
       return false;
    }
    $base = $array[0]; //基准
    $left_array = []; //左区
    $right_array = []; //右区
    //分区操作，重新排序
    for($i = 1; $i < count($array); $i++){
      if($array[$i] <= $base){
          $left_array[] = $array[$i];
      }else{
          $right_array[] = $array[$i];
      }
    }
    
    //递归
    $left_array = quick_sort($left_array);
    $right_array = quick_sort($right_array);
    return array_merge($left_array , $base ,$right_array);
}
